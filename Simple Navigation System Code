package map;

import java.util.Scanner;

class Test {
	static int total = 0;
	private static final int NO_PARENT = -1;

	public static String cityName(int vertex) {
		String city = "";

		if (vertex == 0) {
			city = "Bangalore";
		} else if (vertex == 1) {
			city = "Mysore";
		} else if (vertex == 2) {
			city = "Tumkur";
		} else if (vertex == 3) {
			city = "Hassan";
		} else if (vertex == 4) {
			city = "Davangere";
		} else if (vertex == 5) {
			city = "Mandya";
		} else if (vertex == 6) {
			city = "Shivamogga";
		} else if (vertex == 7) {
			city = "Chikkamagaluru";
		} else if (vertex == 8) {
			city = "Ballari";
		} else if (vertex == 9) {
			city = "Madikeri";
		} else if (vertex == 10) {
			city = "Karawar";
		} else if (vertex == 11) {
			city = "Mangalore";
		}
		return city;
	}

	private static void dijkstra(int[][] adjacencyMatrix, int startVertex, int endVertex) {
		int nVertices = adjacencyMatrix[0].length;

		int[] shortestDistances = new int[nVertices];

		boolean[] added = new boolean[nVertices];

		for (int vertexIndex = 0; vertexIndex < nVertices; vertexIndex++) {
			shortestDistances[vertexIndex] = Integer.MAX_VALUE;
			added[vertexIndex] = false;
		}

		shortestDistances[startVertex] = 0;

		int[] parents = new int[nVertices];

		parents[startVertex] = NO_PARENT;

		for (int i = 1; i < nVertices; i++) {

			int nearestVertex = -1;
			int shortestDistance = Integer.MAX_VALUE;
			for (int vertexIndex = 0; vertexIndex < nVertices; vertexIndex++) {
				if (!added[vertexIndex] && shortestDistances[vertexIndex] < shortestDistance) {
					nearestVertex = vertexIndex;
					shortestDistance = shortestDistances[vertexIndex];
				}
			}

			added[nearestVertex] = true;

			for (int vertexIndex = 0; vertexIndex < nVertices; vertexIndex++) {
				int edgeDistance = adjacencyMatrix[nearestVertex][vertexIndex];

				if (edgeDistance > 0 && ((shortestDistance + edgeDistance) < shortestDistances[vertexIndex])) {
					parents[vertexIndex] = nearestVertex;
					shortestDistances[vertexIndex] = shortestDistance + edgeDistance;
				}
			}
		}

		printSolution(startVertex, endVertex, shortestDistances, parents);
	}

	private static void printSolution(int startVertex, int endVertex, int[] distances, int[] parents) {
		int nVertices = distances.length;
		if (endVertex != startVertex) {
			System.out.println(String.format("\n%s -> %s\n", cityName(startVertex), cityName(endVertex)));
			System.out.println(String.format("Distance = %d\n", distances[endVertex]));
			printPath(endVertex, parents, endVertex);
			System.out.print("\n");
		}
		total += distances[endVertex];
	}

	private static void printPath(int currentVertex, int[] parents, int endVertex) {

		if (currentVertex == NO_PARENT) {
			return;
		}
		printPath(parents[currentVertex], parents, endVertex);
		if (currentVertex == endVertex) {
			System.out.print(String.format("%s", cityName(currentVertex)));
		} else
			System.out.print(String.format("%s->", cityName(currentVertex)));
	}

	public static void main(String[] args) {
		int[][] adjacencyMatrix = { { 0, 0, 69, 171, 0, 99, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 111, 0, 45, 0, 0, 0, 118, 0, 0 }, { 69, 0, 0, 149, 193, 110, 233, 171, 266, 0, 0, 0 },
				{ 171, 111, 149, 0, 0, 0, 0, 0, 0, 103, 0, 171 }, { 0, 0, 193, 0, 0, 0, 91, 0, 159, 0, 0, 0 },
				{ 99, 45, 110, 0, 0, 0, 238, 0, 0, 0, 0, 0 }, { 0, 0, 233, 0, 91, 238, 0, 0, 243, 0, 251, 0 },
				{ 0, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 150 }, { 0, 0, 266, 0, 159, 0, 243, 0, 0, 0, 372, 0 },
				{ 0, 118, 0, 103, 0, 0, 0, 0, 0, 0, 0, 137 }, { 0, 0, 0, 0, 0, 0, 251, 0, 372, 0, 0, 272 },
				{ 0, 0, 0, 171, 0, 0, 0, 150, 0, 137, 272, 0 } };
		int src, last = 0, dest, ch = 1;
		int i = 0;
		int flag = 1;
		int[] stop = new int[11];
		Scanner scan = new Scanner(System.in);
		System.out.println("Cities:\n1.Bangalore \n2.Mysore \n3.Tumkur \n4.Hassan"
				+ "\n5.Davangere \n6.Mandya \n7.Shivamogga \n8.Chikkamagluru "
				+ "\n9.Ballari \n10.Madikeri \n11.Karwar \n12.Mangalore");

		System.out.println("Enter your starting point");
		src = scan.nextInt() - 1;
		System.out.println("Enter your end point");
		dest = scan.nextInt() - 1;
		if (src == dest) {
			System.out.println("Invalid input!!\nEnter your end point");
			dest = scan.nextInt();
		}

		while (ch != 0) {
			System.out.println("Do you want to add stops?[1 for yes, 0 for no]");
			ch = scan.nextInt();
			if (ch == 0)
				break;
			System.out.println("Cities:\n1.Bangalore \n2.Mysore \n3.Tumkur \n4.Hassan"
					+ "\n5.Davangere \n6.Mandya \n7.Shivamogga \n8.Chikkamagluru "
					+ "\n9.Ballari \n10.Madikeri \n11.Karwar \n12.Mangalore");
			System.out.println("\nEnter extra stop");
			stop[i] = scan.nextInt() - 1;
			if (i == 0)
				dijkstra(adjacencyMatrix, src, stop[i]);
			else
				dijkstra(adjacencyMatrix, stop[i - 1], stop[i]);
			flag = 0;
			last = stop[i];
			i++;
		}
		if (flag == 1)
			dijkstra(adjacencyMatrix, src, dest);
		else {
			dijkstra(adjacencyMatrix, last, dest);
			System.out.println("Total distance is " + total);

		}
	}
}
